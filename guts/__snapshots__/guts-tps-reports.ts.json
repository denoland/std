{
  "tps: run fixture test": {
    "recordings": {
      "rep_E8R/dreamcatcher-tech/HAL:main/act_VWV/the_9NG": [
        {
          "request": {
            "model": "gpt-4o",
            "tool_choice": "auto",
            "parallel_tool_calls": true,
            "messages": [
              {
                "content": "run test ./tests/test-fixture.test.md",
                "role": "user",
                "name": "act_VWVY702R0N37T6HC"
              },
              {
                "content": "You are a helpful assistant that brokers conversations with much wiser, deeper agents than\nyourself, and the human user. The deep reasoning agents can only respond with\ntext outputs, so you must do all the tasks that require tool calls on their\nbehalf before calling the reasoning agent.\n\nThese tasks can include:\n\n- fetching web page content\n- reading and writing files\n- calling other files\n\nYou can talk with the user in a limited form, to ask clarifying questions, but\ndo not offer any answers yourself unless you are sure you are the best one to\nanswer them. Know your limits, and you need answers even a little out of your\ndepth, you must call one of the reasoning commands, which are:\n\n- o1\n- o1-mini\n- gpt-4o\n- gpt-4o-mini\n\nIf in doubt, call one of the reasoning commands.\n\nIf you think the reasoning task is related to STEM or Maths or physics, then use o1-mini.\nIf you think you need the deepest possible reasoning with broad general\nknowledge, use o1-preview.\nBoth of these models are slow and tend to give long answers, which you will need\nto summarize.\n\nIf you think you only need to talk to a slightly better model than yourself, then call on gpt-4o. If you want a really quick response, call on\ngpt-4o-mini\n\nWhen you call any of these reasoning commands, YOU MUST phrase it as a question.\nRemember, you are the user and the reasoner is an advanced AI. Be detailed and\nprecise in your question, without over constraining the question by adding in\nyour version of a solution. Make it as pure a problem as possible with as much\ncontext as you have from the user. Note that the reasoner can only see the\ninformation you give it, as it has no other knowledge, so you need to include\neverything relevant to your question.\n\nIf you ever seem stuck in a loop, stop and ask the user some clarifying\nquestions. NEVER GO MORE THAN 3 REASONING CALLS WITHOUT RESPONDING TO THE USER.\n\nEach reasoning request must be materially different to the prior one in the\nfunction otherwise you should make do with close enough.\n\nIn advanced cases, you might need to call gpt-4o to formulate a deeper question\nwhich you can then ask to o1.\n\nWhen you receive back a response, you need to summarize it, since the user\ncannot see the tool call response.\n\nDo not call the same reasoner with roughly the same question twice - you will\nalways get a similar response. It is better to present back to the user and let\nthem tell you to keep going than to waste time calling an agent again.",
                "role": "system",
                "name": "agents_reasoner_md"
              }
            ],
            "seed": 1337,
            "tools": [
              {
                "type": "function",
                "function": {
                  "name": "files_write",
                  "description": "Write to a file with optional contents.  Will overwrite existing files.  Will create all required parent directories. Returns the number of characters written in the operation",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file"
                      },
                      "content": {
                        "type": "string",
                        "description": "the contents of the file to be written"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_ls",
                  "description": "List files for a given path. Returns file names with directory names ending in \"/\".  The root (\"/\") is actually just \".\".  To count the number of files instead of list them, set \"count\" to true.  To include hidden files in the list or count, set \"all\" to true.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the directory you want to list"
                      },
                      "count": {
                        "type": "boolean",
                        "description": "count the number of files and return this instead of the names of the files"
                      },
                      "all": {
                        "type": "boolean",
                        "description": "include all files including hidden files in the operation"
                      }
                    },
                    "required": [
                      "reasoning"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_read",
                  "description": "Read a file.  The contents will be returned as a string.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to read"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_rm",
                  "description": "Remove a file.  This is recursive.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to remove"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_mv",
                  "description": "Move a file efficiently. This is a rename operation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to move"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_cp",
                  "description": "Copy a file efficiently.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to copy"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "stateboard_show",
                  "description": "Show the given path with the given widget on the stateboard",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "pid": {
                        "type": "object",
                        "properties": {
                          "repoId": {
                            "type": "string",
                            "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                          },
                          "account": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "repository": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "branches": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1
                          }
                        },
                        "required": [
                          "repoId",
                          "account",
                          "repository",
                          "branches"
                        ],
                        "additionalProperties": false,
                        "description": "defaults to the current pid"
                      },
                      "commit": {
                        "type": "string",
                        "description": "the commit to show - defaults to the latest commit"
                      },
                      "path": {
                        "type": "string",
                        "description": "the path to show - defaults to \".\""
                      },
                      "widgets": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "TPS_REPORT",
                            "FILE_EXPLORER",
                            "MARKDOWN_EDITOR",
                            "BRANCH_EXPLORER",
                            "COMMIT_GRAPH",
                            "COMMIT_INFO",
                            "THREADS",
                            "REPOS"
                          ],
                          "description": "the widget to show"
                        },
                        "description": "the stack of widgets to display, in the order of their display"
                      }
                    },
                    "required": [
                      "reasoning",
                      "widgets"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "youtube_fetch",
                  "description": "Fetch video details and subtitles (subs).  This will write the transcription json object to the given path, and return that path if everything was ok",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": ".*\\.json$",
                        "description": "Relative path to save the fetched transcription result.  Must end in \".json\" and must start with \"./\""
                      },
                      "videoID": {
                        "type": "string",
                        "description": "The last part of a YouTube URL. For example, in the URL https://www.youtube.com/watch?v=zIB7YsC34Tc, the videoID is \"zIB7YsC34Tc\""
                      },
                      "lang": {
                        "type": "string",
                        "description": "Language code for the subtitles - defaults to \"en\""
                      }
                    },
                    "required": [
                      "path",
                      "videoID"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "utils_time",
                  "description": "Returns the current date and time in ISO 8601 format with zero timezone offset",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "ai-completions_image",
                  "description": "Generate an image using DALL-E-3 from the provided prompt.  The image will be saved to the provided path.  The revised prompt that the image generator used will be returned, as well as the size of the image in bytes.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": "\\.jpg$",
                        "description": "The path to the image to generate, which should be a meaningful name in the images/ directory, and should end in .jpg"
                      },
                      "prompt": {
                        "type": "string",
                        "maxLength": 4000
                      },
                      "lowQuality": {
                        "type": "boolean",
                        "description": "Generate a low quality image as opposed to the default high quality image"
                      },
                      "size": {
                        "type": "string",
                        "enum": [
                          "1024x1024",
                          "1792x1024",
                          "1024x1792"
                        ],
                        "description": "The size of the image to generate"
                      },
                      "style": {
                        "type": "string",
                        "enum": [
                          "vivid",
                          "natural"
                        ],
                        "description": "The style of the image to generate, which defaults to vivid"
                      }
                    },
                    "required": [
                      "path",
                      "prompt"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_newThreadSignal",
                  "description": "Signal to create a new thread and set it as the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_changeThreadSignal",
                  "description": "Signal to change the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repoId": {
                        "type": "string",
                        "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                      },
                      "account": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "repository": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "branches": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "repoId",
                      "account",
                      "repository",
                      "branches"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1",
                  "description": "The o1 agent.  This is a wise and deep reasoning agent, but it is slow and has no tools that it can use, so it only returns text based responses.  It is the wisest of all the agents, but its responses are always very long winded.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1-mini",
                  "description": "The o1-mini agent.  This is a wise and deep but fairly quick reasoner.  It is faster than o1 but it is not as good at general knowledge.  It excels at STEM, physics, and maths reasoning.  It is good at planning.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o",
                  "description": "The gpt-4o agent, or 4o for short.  This is not a reasoning model, but is smart and can think well.  It has good tone of response, very good at summarizing, and has good general knowledge.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o-mini",
                  "description": "The gpt-4o-mini agent, or 40-mini for short.  This is a very quick very fast model.  It does not reason deeply, and its strengths are reptitive or simple tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              }
            ]
          },
          "reply": {
            "assistant": {
              "role": "assistant",
              "content": null,
              "name": "agents/reasoner.md",
              "refusal": null,
              "tool_calls": [
                {
                  "id": "call_EoQTFefLBvz8FgHwTiYPMF2B",
                  "type": "function",
                  "function": {
                    "name": "files_read",
                    "arguments": "{\"reasoning\":[\"The user has requested to run a test from a test fixture file.\",\"To understand the contents and context of the test, I need to read the file located at './tests/test-fixture.test.md'.\",\"Reading the file will allow me to analyze its contents and determine any specific instructions or frameworks required for running the test.\"],\"path\":\"./tests/test-fixture.test.md\"}"
                  }
                }
              ]
            },
            "stats": {
              "created": 1729137746,
              "model": "gpt-4o-2024-08-06",
              "system_fingerprint": "fp_a20a4ee344",
              "duration": 2520,
              "openAiProcessingMs": 2275,
              "usage": {
                "completion_tokens": 88,
                "prompt_tokens": 2473,
                "total_tokens": 2561,
                "completion_tokens_details": {
                  "reasoning_tokens": 0
                },
                "prompt_tokens_details": {
                  "cached_tokens": 2304
                }
              }
            }
          }
        },
        {
          "request": {
            "model": "gpt-4o",
            "tool_choice": "auto",
            "parallel_tool_calls": true,
            "messages": [
              {
                "content": "run test ./tests/test-fixture.test.md",
                "role": "user",
                "name": "act_VWVY702R0N37T6HC"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_EoQTFefLBvz8FgHwTiYPMF2B",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"The user has requested to run a test from a test fixture file.\",\"To understand the contents and context of the test, I need to read the file located at './tests/test-fixture.test.md'.\",\"Reading the file will allow me to analyze its contents and determine any specific instructions or frameworks required for running the test.\"],\"path\":\"./tests/test-fixture.test.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ntarget: agents/agent-fixture.md\nassessor: agents/test-assessor.md\n---\n\n## Call the local function\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- local function was called once\n- result was \"local reply\"\n\n## Fail a test\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- result was \"this expectation should fail\"\n\n## Throw an error\n\n**Prompts**\n\n- Call the error function\n\n**Expectations**\n\n- an error was thrown\n\n## Dependencies function\n\n**Dependencies**\n\n- Call the local function\n\n**Prompts**\n\n- say hello\n\n**Expectations**\n\n- hello was responded to\n- local function was called once\n\n## Multiple Dependencies\n\n**Dependencies**\n\n- Dependencies function\n- Call the local function\n\n**Prompts**\n\n- say goodbye\n\n**Expectations**\n\n- goodbye was responded to\n- local function was called twice\n- in between the two function calls, a \"hello\" was issued by the user\n",
                "tool_call_id": "call_EoQTFefLBvz8FgHwTiYPMF2B"
              },
              {
                "content": "You are a helpful assistant that brokers conversations with much wiser, deeper agents than\nyourself, and the human user. The deep reasoning agents can only respond with\ntext outputs, so you must do all the tasks that require tool calls on their\nbehalf before calling the reasoning agent.\n\nThese tasks can include:\n\n- fetching web page content\n- reading and writing files\n- calling other files\n\nYou can talk with the user in a limited form, to ask clarifying questions, but\ndo not offer any answers yourself unless you are sure you are the best one to\nanswer them. Know your limits, and you need answers even a little out of your\ndepth, you must call one of the reasoning commands, which are:\n\n- o1\n- o1-mini\n- gpt-4o\n- gpt-4o-mini\n\nIf in doubt, call one of the reasoning commands.\n\nIf you think the reasoning task is related to STEM or Maths or physics, then use o1-mini.\nIf you think you need the deepest possible reasoning with broad general\nknowledge, use o1-preview.\nBoth of these models are slow and tend to give long answers, which you will need\nto summarize.\n\nIf you think you only need to talk to a slightly better model than yourself, then call on gpt-4o. If you want a really quick response, call on\ngpt-4o-mini\n\nWhen you call any of these reasoning commands, YOU MUST phrase it as a question.\nRemember, you are the user and the reasoner is an advanced AI. Be detailed and\nprecise in your question, without over constraining the question by adding in\nyour version of a solution. Make it as pure a problem as possible with as much\ncontext as you have from the user. Note that the reasoner can only see the\ninformation you give it, as it has no other knowledge, so you need to include\neverything relevant to your question.\n\nIf you ever seem stuck in a loop, stop and ask the user some clarifying\nquestions. NEVER GO MORE THAN 3 REASONING CALLS WITHOUT RESPONDING TO THE USER.\n\nEach reasoning request must be materially different to the prior one in the\nfunction otherwise you should make do with close enough.\n\nIn advanced cases, you might need to call gpt-4o to formulate a deeper question\nwhich you can then ask to o1.\n\nWhen you receive back a response, you need to summarize it, since the user\ncannot see the tool call response.\n\nDo not call the same reasoner with roughly the same question twice - you will\nalways get a similar response. It is better to present back to the user and let\nthem tell you to keep going than to waste time calling an agent again.",
                "role": "system",
                "name": "agents_reasoner_md"
              }
            ],
            "seed": 1337,
            "tools": [
              {
                "type": "function",
                "function": {
                  "name": "files_write",
                  "description": "Write to a file with optional contents.  Will overwrite existing files.  Will create all required parent directories. Returns the number of characters written in the operation",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file"
                      },
                      "content": {
                        "type": "string",
                        "description": "the contents of the file to be written"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_ls",
                  "description": "List files for a given path. Returns file names with directory names ending in \"/\".  The root (\"/\") is actually just \".\".  To count the number of files instead of list them, set \"count\" to true.  To include hidden files in the list or count, set \"all\" to true.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the directory you want to list"
                      },
                      "count": {
                        "type": "boolean",
                        "description": "count the number of files and return this instead of the names of the files"
                      },
                      "all": {
                        "type": "boolean",
                        "description": "include all files including hidden files in the operation"
                      }
                    },
                    "required": [
                      "reasoning"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_read",
                  "description": "Read a file.  The contents will be returned as a string.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to read"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_rm",
                  "description": "Remove a file.  This is recursive.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to remove"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_mv",
                  "description": "Move a file efficiently. This is a rename operation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to move"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_cp",
                  "description": "Copy a file efficiently.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to copy"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "stateboard_show",
                  "description": "Show the given path with the given widget on the stateboard",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "pid": {
                        "type": "object",
                        "properties": {
                          "repoId": {
                            "type": "string",
                            "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                          },
                          "account": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "repository": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "branches": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1
                          }
                        },
                        "required": [
                          "repoId",
                          "account",
                          "repository",
                          "branches"
                        ],
                        "additionalProperties": false,
                        "description": "defaults to the current pid"
                      },
                      "commit": {
                        "type": "string",
                        "description": "the commit to show - defaults to the latest commit"
                      },
                      "path": {
                        "type": "string",
                        "description": "the path to show - defaults to \".\""
                      },
                      "widgets": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "TPS_REPORT",
                            "FILE_EXPLORER",
                            "MARKDOWN_EDITOR",
                            "BRANCH_EXPLORER",
                            "COMMIT_GRAPH",
                            "COMMIT_INFO",
                            "THREADS",
                            "REPOS"
                          ],
                          "description": "the widget to show"
                        },
                        "description": "the stack of widgets to display, in the order of their display"
                      }
                    },
                    "required": [
                      "reasoning",
                      "widgets"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "youtube_fetch",
                  "description": "Fetch video details and subtitles (subs).  This will write the transcription json object to the given path, and return that path if everything was ok",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": ".*\\.json$",
                        "description": "Relative path to save the fetched transcription result.  Must end in \".json\" and must start with \"./\""
                      },
                      "videoID": {
                        "type": "string",
                        "description": "The last part of a YouTube URL. For example, in the URL https://www.youtube.com/watch?v=zIB7YsC34Tc, the videoID is \"zIB7YsC34Tc\""
                      },
                      "lang": {
                        "type": "string",
                        "description": "Language code for the subtitles - defaults to \"en\""
                      }
                    },
                    "required": [
                      "path",
                      "videoID"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "utils_time",
                  "description": "Returns the current date and time in ISO 8601 format with zero timezone offset",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "ai-completions_image",
                  "description": "Generate an image using DALL-E-3 from the provided prompt.  The image will be saved to the provided path.  The revised prompt that the image generator used will be returned, as well as the size of the image in bytes.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": "\\.jpg$",
                        "description": "The path to the image to generate, which should be a meaningful name in the images/ directory, and should end in .jpg"
                      },
                      "prompt": {
                        "type": "string",
                        "maxLength": 4000
                      },
                      "lowQuality": {
                        "type": "boolean",
                        "description": "Generate a low quality image as opposed to the default high quality image"
                      },
                      "size": {
                        "type": "string",
                        "enum": [
                          "1024x1024",
                          "1792x1024",
                          "1024x1792"
                        ],
                        "description": "The size of the image to generate"
                      },
                      "style": {
                        "type": "string",
                        "enum": [
                          "vivid",
                          "natural"
                        ],
                        "description": "The style of the image to generate, which defaults to vivid"
                      }
                    },
                    "required": [
                      "path",
                      "prompt"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_newThreadSignal",
                  "description": "Signal to create a new thread and set it as the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_changeThreadSignal",
                  "description": "Signal to change the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repoId": {
                        "type": "string",
                        "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                      },
                      "account": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "repository": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "branches": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "repoId",
                      "account",
                      "repository",
                      "branches"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1",
                  "description": "The o1 agent.  This is a wise and deep reasoning agent, but it is slow and has no tools that it can use, so it only returns text based responses.  It is the wisest of all the agents, but its responses are always very long winded.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1-mini",
                  "description": "The o1-mini agent.  This is a wise and deep but fairly quick reasoner.  It is faster than o1 but it is not as good at general knowledge.  It excels at STEM, physics, and maths reasoning.  It is good at planning.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o",
                  "description": "The gpt-4o agent, or 4o for short.  This is not a reasoning model, but is smart and can think well.  It has good tone of response, very good at summarizing, and has good general knowledge.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o-mini",
                  "description": "The gpt-4o-mini agent, or 40-mini for short.  This is a very quick very fast model.  It does not reason deeply, and its strengths are reptitive or simple tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              }
            ]
          },
          "reply": {
            "assistant": {
              "role": "assistant",
              "content": null,
              "name": "agents/reasoner.md",
              "refusal": null,
              "tool_calls": [
                {
                  "id": "call_FmPE3kDKT8HXPsZrSRh9FuSW",
                  "type": "function",
                  "function": {
                    "name": "files_read",
                    "arguments": "{\"reasoning\":[\"To understand the dependencies and the specific functions being referenced, I need to read 'agents/agent-fixture.md'.\",\"This file likely contains definitions or implementations of the local functions and error functions mentioned in the test fixture document.\",\"Reading this file will provide context on how the functions are supposed to operate and what 'local reply' means.\"],\"path\":\"agents/agent-fixture.md\"}"
                  }
                }
              ]
            },
            "stats": {
              "created": 1729137748,
              "model": "gpt-4o-2024-08-06",
              "system_fingerprint": "fp_a20a4ee344",
              "duration": 2205,
              "openAiProcessingMs": 1956,
              "usage": {
                "completion_tokens": 90,
                "prompt_tokens": 2779,
                "total_tokens": 2869,
                "completion_tokens_details": {
                  "reasoning_tokens": 0
                },
                "prompt_tokens_details": {
                  "cached_tokens": 1792
                }
              }
            }
          }
        },
        {
          "request": {
            "model": "gpt-4o",
            "tool_choice": "auto",
            "parallel_tool_calls": true,
            "messages": [
              {
                "content": "run test ./tests/test-fixture.test.md",
                "role": "user",
                "name": "act_VWVY702R0N37T6HC"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_EoQTFefLBvz8FgHwTiYPMF2B",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"The user has requested to run a test from a test fixture file.\",\"To understand the contents and context of the test, I need to read the file located at './tests/test-fixture.test.md'.\",\"Reading the file will allow me to analyze its contents and determine any specific instructions or frameworks required for running the test.\"],\"path\":\"./tests/test-fixture.test.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ntarget: agents/agent-fixture.md\nassessor: agents/test-assessor.md\n---\n\n## Call the local function\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- local function was called once\n- result was \"local reply\"\n\n## Fail a test\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- result was \"this expectation should fail\"\n\n## Throw an error\n\n**Prompts**\n\n- Call the error function\n\n**Expectations**\n\n- an error was thrown\n\n## Dependencies function\n\n**Dependencies**\n\n- Call the local function\n\n**Prompts**\n\n- say hello\n\n**Expectations**\n\n- hello was responded to\n- local function was called once\n\n## Multiple Dependencies\n\n**Dependencies**\n\n- Dependencies function\n- Call the local function\n\n**Prompts**\n\n- say goodbye\n\n**Expectations**\n\n- goodbye was responded to\n- local function was called twice\n- in between the two function calls, a \"hello\" was issued by the user\n",
                "tool_call_id": "call_EoQTFefLBvz8FgHwTiYPMF2B"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_FmPE3kDKT8HXPsZrSRh9FuSW",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"To understand the dependencies and the specific functions being referenced, I need to read 'agents/agent-fixture.md'.\",\"This file likely contains definitions or implementations of the local functions and error functions mentioned in the test fixture document.\",\"Reading this file will provide context on how the functions are supposed to operate and what 'local reply' means.\"],\"path\":\"agents/agent-fixture.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ncommands:\n  - io-fixture:local\n  - io-fixture:error\n---\n\nYour name is 'Assistant'\n\nALWAYS be as brief as possible\n",
                "tool_call_id": "call_FmPE3kDKT8HXPsZrSRh9FuSW"
              },
              {
                "content": "You are a helpful assistant that brokers conversations with much wiser, deeper agents than\nyourself, and the human user. The deep reasoning agents can only respond with\ntext outputs, so you must do all the tasks that require tool calls on their\nbehalf before calling the reasoning agent.\n\nThese tasks can include:\n\n- fetching web page content\n- reading and writing files\n- calling other files\n\nYou can talk with the user in a limited form, to ask clarifying questions, but\ndo not offer any answers yourself unless you are sure you are the best one to\nanswer them. Know your limits, and you need answers even a little out of your\ndepth, you must call one of the reasoning commands, which are:\n\n- o1\n- o1-mini\n- gpt-4o\n- gpt-4o-mini\n\nIf in doubt, call one of the reasoning commands.\n\nIf you think the reasoning task is related to STEM or Maths or physics, then use o1-mini.\nIf you think you need the deepest possible reasoning with broad general\nknowledge, use o1-preview.\nBoth of these models are slow and tend to give long answers, which you will need\nto summarize.\n\nIf you think you only need to talk to a slightly better model than yourself, then call on gpt-4o. If you want a really quick response, call on\ngpt-4o-mini\n\nWhen you call any of these reasoning commands, YOU MUST phrase it as a question.\nRemember, you are the user and the reasoner is an advanced AI. Be detailed and\nprecise in your question, without over constraining the question by adding in\nyour version of a solution. Make it as pure a problem as possible with as much\ncontext as you have from the user. Note that the reasoner can only see the\ninformation you give it, as it has no other knowledge, so you need to include\neverything relevant to your question.\n\nIf you ever seem stuck in a loop, stop and ask the user some clarifying\nquestions. NEVER GO MORE THAN 3 REASONING CALLS WITHOUT RESPONDING TO THE USER.\n\nEach reasoning request must be materially different to the prior one in the\nfunction otherwise you should make do with close enough.\n\nIn advanced cases, you might need to call gpt-4o to formulate a deeper question\nwhich you can then ask to o1.\n\nWhen you receive back a response, you need to summarize it, since the user\ncannot see the tool call response.\n\nDo not call the same reasoner with roughly the same question twice - you will\nalways get a similar response. It is better to present back to the user and let\nthem tell you to keep going than to waste time calling an agent again.",
                "role": "system",
                "name": "agents_reasoner_md"
              }
            ],
            "seed": 1337,
            "tools": [
              {
                "type": "function",
                "function": {
                  "name": "files_write",
                  "description": "Write to a file with optional contents.  Will overwrite existing files.  Will create all required parent directories. Returns the number of characters written in the operation",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file"
                      },
                      "content": {
                        "type": "string",
                        "description": "the contents of the file to be written"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_ls",
                  "description": "List files for a given path. Returns file names with directory names ending in \"/\".  The root (\"/\") is actually just \".\".  To count the number of files instead of list them, set \"count\" to true.  To include hidden files in the list or count, set \"all\" to true.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the directory you want to list"
                      },
                      "count": {
                        "type": "boolean",
                        "description": "count the number of files and return this instead of the names of the files"
                      },
                      "all": {
                        "type": "boolean",
                        "description": "include all files including hidden files in the operation"
                      }
                    },
                    "required": [
                      "reasoning"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_read",
                  "description": "Read a file.  The contents will be returned as a string.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to read"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_rm",
                  "description": "Remove a file.  This is recursive.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to remove"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_mv",
                  "description": "Move a file efficiently. This is a rename operation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to move"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_cp",
                  "description": "Copy a file efficiently.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to copy"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "stateboard_show",
                  "description": "Show the given path with the given widget on the stateboard",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "pid": {
                        "type": "object",
                        "properties": {
                          "repoId": {
                            "type": "string",
                            "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                          },
                          "account": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "repository": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "branches": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1
                          }
                        },
                        "required": [
                          "repoId",
                          "account",
                          "repository",
                          "branches"
                        ],
                        "additionalProperties": false,
                        "description": "defaults to the current pid"
                      },
                      "commit": {
                        "type": "string",
                        "description": "the commit to show - defaults to the latest commit"
                      },
                      "path": {
                        "type": "string",
                        "description": "the path to show - defaults to \".\""
                      },
                      "widgets": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "TPS_REPORT",
                            "FILE_EXPLORER",
                            "MARKDOWN_EDITOR",
                            "BRANCH_EXPLORER",
                            "COMMIT_GRAPH",
                            "COMMIT_INFO",
                            "THREADS",
                            "REPOS"
                          ],
                          "description": "the widget to show"
                        },
                        "description": "the stack of widgets to display, in the order of their display"
                      }
                    },
                    "required": [
                      "reasoning",
                      "widgets"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "youtube_fetch",
                  "description": "Fetch video details and subtitles (subs).  This will write the transcription json object to the given path, and return that path if everything was ok",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": ".*\\.json$",
                        "description": "Relative path to save the fetched transcription result.  Must end in \".json\" and must start with \"./\""
                      },
                      "videoID": {
                        "type": "string",
                        "description": "The last part of a YouTube URL. For example, in the URL https://www.youtube.com/watch?v=zIB7YsC34Tc, the videoID is \"zIB7YsC34Tc\""
                      },
                      "lang": {
                        "type": "string",
                        "description": "Language code for the subtitles - defaults to \"en\""
                      }
                    },
                    "required": [
                      "path",
                      "videoID"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "utils_time",
                  "description": "Returns the current date and time in ISO 8601 format with zero timezone offset",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "ai-completions_image",
                  "description": "Generate an image using DALL-E-3 from the provided prompt.  The image will be saved to the provided path.  The revised prompt that the image generator used will be returned, as well as the size of the image in bytes.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": "\\.jpg$",
                        "description": "The path to the image to generate, which should be a meaningful name in the images/ directory, and should end in .jpg"
                      },
                      "prompt": {
                        "type": "string",
                        "maxLength": 4000
                      },
                      "lowQuality": {
                        "type": "boolean",
                        "description": "Generate a low quality image as opposed to the default high quality image"
                      },
                      "size": {
                        "type": "string",
                        "enum": [
                          "1024x1024",
                          "1792x1024",
                          "1024x1792"
                        ],
                        "description": "The size of the image to generate"
                      },
                      "style": {
                        "type": "string",
                        "enum": [
                          "vivid",
                          "natural"
                        ],
                        "description": "The style of the image to generate, which defaults to vivid"
                      }
                    },
                    "required": [
                      "path",
                      "prompt"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_newThreadSignal",
                  "description": "Signal to create a new thread and set it as the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_changeThreadSignal",
                  "description": "Signal to change the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repoId": {
                        "type": "string",
                        "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                      },
                      "account": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "repository": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "branches": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "repoId",
                      "account",
                      "repository",
                      "branches"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1",
                  "description": "The o1 agent.  This is a wise and deep reasoning agent, but it is slow and has no tools that it can use, so it only returns text based responses.  It is the wisest of all the agents, but its responses are always very long winded.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1-mini",
                  "description": "The o1-mini agent.  This is a wise and deep but fairly quick reasoner.  It is faster than o1 but it is not as good at general knowledge.  It excels at STEM, physics, and maths reasoning.  It is good at planning.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o",
                  "description": "The gpt-4o agent, or 4o for short.  This is not a reasoning model, but is smart and can think well.  It has good tone of response, very good at summarizing, and has good general knowledge.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o-mini",
                  "description": "The gpt-4o-mini agent, or 40-mini for short.  This is a very quick very fast model.  It does not reason deeply, and its strengths are reptitive or simple tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              }
            ]
          },
          "reply": {
            "assistant": {
              "role": "assistant",
              "content": null,
              "name": "agents/reasoner.md",
              "refusal": null,
              "tool_calls": [
                {
                  "id": "call_JmwXtf7pHtUapxxSUHU9sppT",
                  "type": "function",
                  "function": {
                    "name": "files_read",
                    "arguments": "{\"reasoning\":[\"The test fixture document references an 'assessor' at 'agents/test-assessor.md'.\",\"Reading this file may provide insights into how the tests are evaluated and the expected outcomes.\",\"Understanding the assessment criteria is crucial for running the tests correctly.\"],\"path\":\"agents/test-assessor.md\"}"
                  }
                }
              ]
            },
            "stats": {
              "created": 1729137751,
              "model": "gpt-4o-2024-08-06",
              "system_fingerprint": "fp_a20a4ee344",
              "duration": 1750,
              "openAiProcessingMs": 1504,
              "usage": {
                "completion_tokens": 70,
                "prompt_tokens": 2915,
                "total_tokens": 2985,
                "completion_tokens_details": {
                  "reasoning_tokens": 0
                },
                "prompt_tokens_details": {
                  "cached_tokens": 1792
                }
              }
            }
          }
        },
        {
          "request": {
            "model": "gpt-4o",
            "tool_choice": "auto",
            "parallel_tool_calls": true,
            "messages": [
              {
                "content": "run test ./tests/test-fixture.test.md",
                "role": "user",
                "name": "act_VWVY702R0N37T6HC"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_EoQTFefLBvz8FgHwTiYPMF2B",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"The user has requested to run a test from a test fixture file.\",\"To understand the contents and context of the test, I need to read the file located at './tests/test-fixture.test.md'.\",\"Reading the file will allow me to analyze its contents and determine any specific instructions or frameworks required for running the test.\"],\"path\":\"./tests/test-fixture.test.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ntarget: agents/agent-fixture.md\nassessor: agents/test-assessor.md\n---\n\n## Call the local function\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- local function was called once\n- result was \"local reply\"\n\n## Fail a test\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- result was \"this expectation should fail\"\n\n## Throw an error\n\n**Prompts**\n\n- Call the error function\n\n**Expectations**\n\n- an error was thrown\n\n## Dependencies function\n\n**Dependencies**\n\n- Call the local function\n\n**Prompts**\n\n- say hello\n\n**Expectations**\n\n- hello was responded to\n- local function was called once\n\n## Multiple Dependencies\n\n**Dependencies**\n\n- Dependencies function\n- Call the local function\n\n**Prompts**\n\n- say goodbye\n\n**Expectations**\n\n- goodbye was responded to\n- local function was called twice\n- in between the two function calls, a \"hello\" was issued by the user\n",
                "tool_call_id": "call_EoQTFefLBvz8FgHwTiYPMF2B"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_FmPE3kDKT8HXPsZrSRh9FuSW",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"To understand the dependencies and the specific functions being referenced, I need to read 'agents/agent-fixture.md'.\",\"This file likely contains definitions or implementations of the local functions and error functions mentioned in the test fixture document.\",\"Reading this file will provide context on how the functions are supposed to operate and what 'local reply' means.\"],\"path\":\"agents/agent-fixture.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ncommands:\n  - io-fixture:local\n  - io-fixture:error\n---\n\nYour name is 'Assistant'\n\nALWAYS be as brief as possible\n",
                "tool_call_id": "call_FmPE3kDKT8HXPsZrSRh9FuSW"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_JmwXtf7pHtUapxxSUHU9sppT",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"The test fixture document references an 'assessor' at 'agents/test-assessor.md'.\",\"Reading this file may provide insights into how the tests are evaluated and the expected outcomes.\",\"Understanding the assessment criteria is crucial for running the tests correctly.\"],\"path\":\"agents/test-assessor.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\nconfig:\n  parallel_tool_calls: false\n  tool_choice: required\ncommands:\n  - test-case-runner:openai\n  - test-case-runner:assessment\n---\n\nYou are an expert assessor of test results.\n\nAI agents will have been run previously under test conditions. Your job is to\nassess the resulting system state against the expectation, analyze why the\nsystem prompt used for the AI agent did not perform as well as it could have,\nand list improvements that could be made to the system prompt.\n\nYou will be given two inputs:\n\n1. \"threadPath\" which is a parameter to call the openai function which will read\n   in the system state for assessment against the expectation\n2. An \"Expectation\" to assess the system state against\n\nThe result from the openai function will be a json object with two keys: request\nand response. The request is the api call that was sent to the openai chat\ncompletion endpoint, and the response is what was received back from that api\ncall. Included in this api call will be the system prompt message.\n\nWhen considering the system prompt, look for factual inconsistencies,\nconflicting instructions, overly verbose or redundant sections. Also look for\nways to compress the prompt down to be more direct, or ways to make the prompt\nmore explicit to reduce the chances of deviation.\n\n## The process\n\nThere are only two steps you are allowed to do to complete your task:\n\nFirst, use the test-case-runner:openai function to read the thread file specified by threadPath. Think carefully about the information you receive\nback.\n\nSecond, analyze the information and then call the test-case-runner:assessment function with your assessment. Be brief - do not\nrepeat the expectation or the contents of the thread file verbatim - summarize.\n\n",
                "tool_call_id": "call_JmwXtf7pHtUapxxSUHU9sppT"
              },
              {
                "content": "You are a helpful assistant that brokers conversations with much wiser, deeper agents than\nyourself, and the human user. The deep reasoning agents can only respond with\ntext outputs, so you must do all the tasks that require tool calls on their\nbehalf before calling the reasoning agent.\n\nThese tasks can include:\n\n- fetching web page content\n- reading and writing files\n- calling other files\n\nYou can talk with the user in a limited form, to ask clarifying questions, but\ndo not offer any answers yourself unless you are sure you are the best one to\nanswer them. Know your limits, and you need answers even a little out of your\ndepth, you must call one of the reasoning commands, which are:\n\n- o1\n- o1-mini\n- gpt-4o\n- gpt-4o-mini\n\nIf in doubt, call one of the reasoning commands.\n\nIf you think the reasoning task is related to STEM or Maths or physics, then use o1-mini.\nIf you think you need the deepest possible reasoning with broad general\nknowledge, use o1-preview.\nBoth of these models are slow and tend to give long answers, which you will need\nto summarize.\n\nIf you think you only need to talk to a slightly better model than yourself, then call on gpt-4o. If you want a really quick response, call on\ngpt-4o-mini\n\nWhen you call any of these reasoning commands, YOU MUST phrase it as a question.\nRemember, you are the user and the reasoner is an advanced AI. Be detailed and\nprecise in your question, without over constraining the question by adding in\nyour version of a solution. Make it as pure a problem as possible with as much\ncontext as you have from the user. Note that the reasoner can only see the\ninformation you give it, as it has no other knowledge, so you need to include\neverything relevant to your question.\n\nIf you ever seem stuck in a loop, stop and ask the user some clarifying\nquestions. NEVER GO MORE THAN 3 REASONING CALLS WITHOUT RESPONDING TO THE USER.\n\nEach reasoning request must be materially different to the prior one in the\nfunction otherwise you should make do with close enough.\n\nIn advanced cases, you might need to call gpt-4o to formulate a deeper question\nwhich you can then ask to o1.\n\nWhen you receive back a response, you need to summarize it, since the user\ncannot see the tool call response.\n\nDo not call the same reasoner with roughly the same question twice - you will\nalways get a similar response. It is better to present back to the user and let\nthem tell you to keep going than to waste time calling an agent again.",
                "role": "system",
                "name": "agents_reasoner_md"
              }
            ],
            "seed": 1337,
            "tools": [
              {
                "type": "function",
                "function": {
                  "name": "files_write",
                  "description": "Write to a file with optional contents.  Will overwrite existing files.  Will create all required parent directories. Returns the number of characters written in the operation",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file"
                      },
                      "content": {
                        "type": "string",
                        "description": "the contents of the file to be written"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_ls",
                  "description": "List files for a given path. Returns file names with directory names ending in \"/\".  The root (\"/\") is actually just \".\".  To count the number of files instead of list them, set \"count\" to true.  To include hidden files in the list or count, set \"all\" to true.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the directory you want to list"
                      },
                      "count": {
                        "type": "boolean",
                        "description": "count the number of files and return this instead of the names of the files"
                      },
                      "all": {
                        "type": "boolean",
                        "description": "include all files including hidden files in the operation"
                      }
                    },
                    "required": [
                      "reasoning"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_read",
                  "description": "Read a file.  The contents will be returned as a string.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to read"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_rm",
                  "description": "Remove a file.  This is recursive.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to remove"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_mv",
                  "description": "Move a file efficiently. This is a rename operation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to move"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_cp",
                  "description": "Copy a file efficiently.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to copy"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "stateboard_show",
                  "description": "Show the given path with the given widget on the stateboard",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "pid": {
                        "type": "object",
                        "properties": {
                          "repoId": {
                            "type": "string",
                            "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                          },
                          "account": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "repository": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "branches": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1
                          }
                        },
                        "required": [
                          "repoId",
                          "account",
                          "repository",
                          "branches"
                        ],
                        "additionalProperties": false,
                        "description": "defaults to the current pid"
                      },
                      "commit": {
                        "type": "string",
                        "description": "the commit to show - defaults to the latest commit"
                      },
                      "path": {
                        "type": "string",
                        "description": "the path to show - defaults to \".\""
                      },
                      "widgets": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "TPS_REPORT",
                            "FILE_EXPLORER",
                            "MARKDOWN_EDITOR",
                            "BRANCH_EXPLORER",
                            "COMMIT_GRAPH",
                            "COMMIT_INFO",
                            "THREADS",
                            "REPOS"
                          ],
                          "description": "the widget to show"
                        },
                        "description": "the stack of widgets to display, in the order of their display"
                      }
                    },
                    "required": [
                      "reasoning",
                      "widgets"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "youtube_fetch",
                  "description": "Fetch video details and subtitles (subs).  This will write the transcription json object to the given path, and return that path if everything was ok",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": ".*\\.json$",
                        "description": "Relative path to save the fetched transcription result.  Must end in \".json\" and must start with \"./\""
                      },
                      "videoID": {
                        "type": "string",
                        "description": "The last part of a YouTube URL. For example, in the URL https://www.youtube.com/watch?v=zIB7YsC34Tc, the videoID is \"zIB7YsC34Tc\""
                      },
                      "lang": {
                        "type": "string",
                        "description": "Language code for the subtitles - defaults to \"en\""
                      }
                    },
                    "required": [
                      "path",
                      "videoID"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "utils_time",
                  "description": "Returns the current date and time in ISO 8601 format with zero timezone offset",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "ai-completions_image",
                  "description": "Generate an image using DALL-E-3 from the provided prompt.  The image will be saved to the provided path.  The revised prompt that the image generator used will be returned, as well as the size of the image in bytes.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": "\\.jpg$",
                        "description": "The path to the image to generate, which should be a meaningful name in the images/ directory, and should end in .jpg"
                      },
                      "prompt": {
                        "type": "string",
                        "maxLength": 4000
                      },
                      "lowQuality": {
                        "type": "boolean",
                        "description": "Generate a low quality image as opposed to the default high quality image"
                      },
                      "size": {
                        "type": "string",
                        "enum": [
                          "1024x1024",
                          "1792x1024",
                          "1024x1792"
                        ],
                        "description": "The size of the image to generate"
                      },
                      "style": {
                        "type": "string",
                        "enum": [
                          "vivid",
                          "natural"
                        ],
                        "description": "The style of the image to generate, which defaults to vivid"
                      }
                    },
                    "required": [
                      "path",
                      "prompt"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_newThreadSignal",
                  "description": "Signal to create a new thread and set it as the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_changeThreadSignal",
                  "description": "Signal to change the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repoId": {
                        "type": "string",
                        "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                      },
                      "account": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "repository": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "branches": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "repoId",
                      "account",
                      "repository",
                      "branches"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1",
                  "description": "The o1 agent.  This is a wise and deep reasoning agent, but it is slow and has no tools that it can use, so it only returns text based responses.  It is the wisest of all the agents, but its responses are always very long winded.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1-mini",
                  "description": "The o1-mini agent.  This is a wise and deep but fairly quick reasoner.  It is faster than o1 but it is not as good at general knowledge.  It excels at STEM, physics, and maths reasoning.  It is good at planning.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o",
                  "description": "The gpt-4o agent, or 4o for short.  This is not a reasoning model, but is smart and can think well.  It has good tone of response, very good at summarizing, and has good general knowledge.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o-mini",
                  "description": "The gpt-4o-mini agent, or 40-mini for short.  This is a very quick very fast model.  It does not reason deeply, and its strengths are reptitive or simple tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              }
            ]
          },
          "reply": {
            "assistant": {
              "role": "assistant",
              "content": "The test file './tests/test-fixture.test.md' outlines several test scenarios.\n\n1. **Call the local function**: It expects the local function to be called once and for the result to be \"local reply\".\n\n2. **Fail a test**: It expects the result to be \"this expectation should fail\" which is likely designed to ensure a mechanism can handle failed tests.\n\n3. **Throw an error**: It expects an error to be thrown when the error function is called.\n\n4. **Dependencies function**: This involves a dependency where the local function needs to be called after saying hello. The expectation includes that hello should be responded to.\n\n5. **Multiple Dependencies**: This scenario has two dependencies. It expects the local function to be called twice and verifies a sequence where a \"hello\" is issued between calls.\n\nTo execute the tests, it appears necessary to interact with the commands defined in 'agents/agent-fixture.md', specifically `io-fixture:local` and `io-fixture:error`. There is also a consideration that the fixture is configured for non-parallel execution, with the possibility of multiple tool selections as required.\n\nLet me now run these tests and assess their outcomes.",
              "name": "agents/reasoner.md",
              "refusal": null,
              "tool_calls": [
                {
                  "id": "call_1tXsxy2YrSulCwadf9RPxvEt",
                  "type": "function",
                  "function": {
                    "name": "files_write",
                    "arguments": "{\"reasoning\": [\"Prepare and configure each of the test requests based on the read test fixture specification for execution.\", \"Write a configuration or test run file if needed.\"], \"path\": \"test/test-run.md\", \"content\": \"---\\ncommands:\\n  - io-fixture:local\\n  - io-fixture:error\\n---\"}"
                  }
                }
              ]
            },
            "stats": {
              "created": 1729137754,
              "model": "gpt-4o-2024-08-06",
              "system_fingerprint": "fp_a20a4ee344",
              "duration": 5298,
              "openAiProcessingMs": 5066,
              "usage": {
                "completion_tokens": 334,
                "prompt_tokens": 3365,
                "total_tokens": 3699,
                "completion_tokens_details": {
                  "reasoning_tokens": 0
                },
                "prompt_tokens_details": {
                  "cached_tokens": 2176
                }
              }
            }
          }
        },
        {
          "request": {
            "model": "gpt-4o",
            "tool_choice": "auto",
            "parallel_tool_calls": true,
            "messages": [
              {
                "content": "run test ./tests/test-fixture.test.md",
                "role": "user",
                "name": "act_VWVY702R0N37T6HC"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_EoQTFefLBvz8FgHwTiYPMF2B",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"The user has requested to run a test from a test fixture file.\",\"To understand the contents and context of the test, I need to read the file located at './tests/test-fixture.test.md'.\",\"Reading the file will allow me to analyze its contents and determine any specific instructions or frameworks required for running the test.\"],\"path\":\"./tests/test-fixture.test.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ntarget: agents/agent-fixture.md\nassessor: agents/test-assessor.md\n---\n\n## Call the local function\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- local function was called once\n- result was \"local reply\"\n\n## Fail a test\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- result was \"this expectation should fail\"\n\n## Throw an error\n\n**Prompts**\n\n- Call the error function\n\n**Expectations**\n\n- an error was thrown\n\n## Dependencies function\n\n**Dependencies**\n\n- Call the local function\n\n**Prompts**\n\n- say hello\n\n**Expectations**\n\n- hello was responded to\n- local function was called once\n\n## Multiple Dependencies\n\n**Dependencies**\n\n- Dependencies function\n- Call the local function\n\n**Prompts**\n\n- say goodbye\n\n**Expectations**\n\n- goodbye was responded to\n- local function was called twice\n- in between the two function calls, a \"hello\" was issued by the user\n",
                "tool_call_id": "call_EoQTFefLBvz8FgHwTiYPMF2B"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_FmPE3kDKT8HXPsZrSRh9FuSW",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"To understand the dependencies and the specific functions being referenced, I need to read 'agents/agent-fixture.md'.\",\"This file likely contains definitions or implementations of the local functions and error functions mentioned in the test fixture document.\",\"Reading this file will provide context on how the functions are supposed to operate and what 'local reply' means.\"],\"path\":\"agents/agent-fixture.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ncommands:\n  - io-fixture:local\n  - io-fixture:error\n---\n\nYour name is 'Assistant'\n\nALWAYS be as brief as possible\n",
                "tool_call_id": "call_FmPE3kDKT8HXPsZrSRh9FuSW"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_JmwXtf7pHtUapxxSUHU9sppT",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"The test fixture document references an 'assessor' at 'agents/test-assessor.md'.\",\"Reading this file may provide insights into how the tests are evaluated and the expected outcomes.\",\"Understanding the assessment criteria is crucial for running the tests correctly.\"],\"path\":\"agents/test-assessor.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\nconfig:\n  parallel_tool_calls: false\n  tool_choice: required\ncommands:\n  - test-case-runner:openai\n  - test-case-runner:assessment\n---\n\nYou are an expert assessor of test results.\n\nAI agents will have been run previously under test conditions. Your job is to\nassess the resulting system state against the expectation, analyze why the\nsystem prompt used for the AI agent did not perform as well as it could have,\nand list improvements that could be made to the system prompt.\n\nYou will be given two inputs:\n\n1. \"threadPath\" which is a parameter to call the openai function which will read\n   in the system state for assessment against the expectation\n2. An \"Expectation\" to assess the system state against\n\nThe result from the openai function will be a json object with two keys: request\nand response. The request is the api call that was sent to the openai chat\ncompletion endpoint, and the response is what was received back from that api\ncall. Included in this api call will be the system prompt message.\n\nWhen considering the system prompt, look for factual inconsistencies,\nconflicting instructions, overly verbose or redundant sections. Also look for\nways to compress the prompt down to be more direct, or ways to make the prompt\nmore explicit to reduce the chances of deviation.\n\n## The process\n\nThere are only two steps you are allowed to do to complete your task:\n\nFirst, use the test-case-runner:openai function to read the thread file specified by threadPath. Think carefully about the information you receive\nback.\n\nSecond, analyze the information and then call the test-case-runner:assessment function with your assessment. Be brief - do not\nrepeat the expectation or the contents of the thread file verbatim - summarize.\n\n",
                "tool_call_id": "call_JmwXtf7pHtUapxxSUHU9sppT"
              },
              {
                "role": "assistant",
                "content": "The test file './tests/test-fixture.test.md' outlines several test scenarios.\n\n1. **Call the local function**: It expects the local function to be called once and for the result to be \"local reply\".\n\n2. **Fail a test**: It expects the result to be \"this expectation should fail\" which is likely designed to ensure a mechanism can handle failed tests.\n\n3. **Throw an error**: It expects an error to be thrown when the error function is called.\n\n4. **Dependencies function**: This involves a dependency where the local function needs to be called after saying hello. The expectation includes that hello should be responded to.\n\n5. **Multiple Dependencies**: This scenario has two dependencies. It expects the local function to be called twice and verifies a sequence where a \"hello\" is issued between calls.\n\nTo execute the tests, it appears necessary to interact with the commands defined in 'agents/agent-fixture.md', specifically `io-fixture:local` and `io-fixture:error`. There is also a consideration that the fixture is configured for non-parallel execution, with the possibility of multiple tool selections as required.\n\nLet me now run these tests and assess their outcomes.",
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_1tXsxy2YrSulCwadf9RPxvEt",
                    "type": "function",
                    "function": {
                      "name": "files_write",
                      "arguments": "{\"reasoning\": [\"Prepare and configure each of the test requests based on the read test fixture specification for execution.\", \"Write a configuration or test run file if needed.\"], \"path\": \"test/test-run.md\", \"content\": \"---\\ncommands:\\n  - io-fixture:local\\n  - io-fixture:error\\n---\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "{\"charactersWritten\":59}",
                "tool_call_id": "call_1tXsxy2YrSulCwadf9RPxvEt"
              },
              {
                "content": "You are a helpful assistant that brokers conversations with much wiser, deeper agents than\nyourself, and the human user. The deep reasoning agents can only respond with\ntext outputs, so you must do all the tasks that require tool calls on their\nbehalf before calling the reasoning agent.\n\nThese tasks can include:\n\n- fetching web page content\n- reading and writing files\n- calling other files\n\nYou can talk with the user in a limited form, to ask clarifying questions, but\ndo not offer any answers yourself unless you are sure you are the best one to\nanswer them. Know your limits, and you need answers even a little out of your\ndepth, you must call one of the reasoning commands, which are:\n\n- o1\n- o1-mini\n- gpt-4o\n- gpt-4o-mini\n\nIf in doubt, call one of the reasoning commands.\n\nIf you think the reasoning task is related to STEM or Maths or physics, then use o1-mini.\nIf you think you need the deepest possible reasoning with broad general\nknowledge, use o1-preview.\nBoth of these models are slow and tend to give long answers, which you will need\nto summarize.\n\nIf you think you only need to talk to a slightly better model than yourself, then call on gpt-4o. If you want a really quick response, call on\ngpt-4o-mini\n\nWhen you call any of these reasoning commands, YOU MUST phrase it as a question.\nRemember, you are the user and the reasoner is an advanced AI. Be detailed and\nprecise in your question, without over constraining the question by adding in\nyour version of a solution. Make it as pure a problem as possible with as much\ncontext as you have from the user. Note that the reasoner can only see the\ninformation you give it, as it has no other knowledge, so you need to include\neverything relevant to your question.\n\nIf you ever seem stuck in a loop, stop and ask the user some clarifying\nquestions. NEVER GO MORE THAN 3 REASONING CALLS WITHOUT RESPONDING TO THE USER.\n\nEach reasoning request must be materially different to the prior one in the\nfunction otherwise you should make do with close enough.\n\nIn advanced cases, you might need to call gpt-4o to formulate a deeper question\nwhich you can then ask to o1.\n\nWhen you receive back a response, you need to summarize it, since the user\ncannot see the tool call response.\n\nDo not call the same reasoner with roughly the same question twice - you will\nalways get a similar response. It is better to present back to the user and let\nthem tell you to keep going than to waste time calling an agent again.",
                "role": "system",
                "name": "agents_reasoner_md"
              }
            ],
            "seed": 1337,
            "tools": [
              {
                "type": "function",
                "function": {
                  "name": "files_write",
                  "description": "Write to a file with optional contents.  Will overwrite existing files.  Will create all required parent directories. Returns the number of characters written in the operation",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file"
                      },
                      "content": {
                        "type": "string",
                        "description": "the contents of the file to be written"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_ls",
                  "description": "List files for a given path. Returns file names with directory names ending in \"/\".  The root (\"/\") is actually just \".\".  To count the number of files instead of list them, set \"count\" to true.  To include hidden files in the list or count, set \"all\" to true.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the directory you want to list"
                      },
                      "count": {
                        "type": "boolean",
                        "description": "count the number of files and return this instead of the names of the files"
                      },
                      "all": {
                        "type": "boolean",
                        "description": "include all files including hidden files in the operation"
                      }
                    },
                    "required": [
                      "reasoning"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_read",
                  "description": "Read a file.  The contents will be returned as a string.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to read"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_rm",
                  "description": "Remove a file.  This is recursive.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to remove"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_mv",
                  "description": "Move a file efficiently. This is a rename operation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to move"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_cp",
                  "description": "Copy a file efficiently.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to copy"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "stateboard_show",
                  "description": "Show the given path with the given widget on the stateboard",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "pid": {
                        "type": "object",
                        "properties": {
                          "repoId": {
                            "type": "string",
                            "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                          },
                          "account": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "repository": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "branches": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1
                          }
                        },
                        "required": [
                          "repoId",
                          "account",
                          "repository",
                          "branches"
                        ],
                        "additionalProperties": false,
                        "description": "defaults to the current pid"
                      },
                      "commit": {
                        "type": "string",
                        "description": "the commit to show - defaults to the latest commit"
                      },
                      "path": {
                        "type": "string",
                        "description": "the path to show - defaults to \".\""
                      },
                      "widgets": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "TPS_REPORT",
                            "FILE_EXPLORER",
                            "MARKDOWN_EDITOR",
                            "BRANCH_EXPLORER",
                            "COMMIT_GRAPH",
                            "COMMIT_INFO",
                            "THREADS",
                            "REPOS"
                          ],
                          "description": "the widget to show"
                        },
                        "description": "the stack of widgets to display, in the order of their display"
                      }
                    },
                    "required": [
                      "reasoning",
                      "widgets"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "youtube_fetch",
                  "description": "Fetch video details and subtitles (subs).  This will write the transcription json object to the given path, and return that path if everything was ok",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": ".*\\.json$",
                        "description": "Relative path to save the fetched transcription result.  Must end in \".json\" and must start with \"./\""
                      },
                      "videoID": {
                        "type": "string",
                        "description": "The last part of a YouTube URL. For example, in the URL https://www.youtube.com/watch?v=zIB7YsC34Tc, the videoID is \"zIB7YsC34Tc\""
                      },
                      "lang": {
                        "type": "string",
                        "description": "Language code for the subtitles - defaults to \"en\""
                      }
                    },
                    "required": [
                      "path",
                      "videoID"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "utils_time",
                  "description": "Returns the current date and time in ISO 8601 format with zero timezone offset",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "ai-completions_image",
                  "description": "Generate an image using DALL-E-3 from the provided prompt.  The image will be saved to the provided path.  The revised prompt that the image generator used will be returned, as well as the size of the image in bytes.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": "\\.jpg$",
                        "description": "The path to the image to generate, which should be a meaningful name in the images/ directory, and should end in .jpg"
                      },
                      "prompt": {
                        "type": "string",
                        "maxLength": 4000
                      },
                      "lowQuality": {
                        "type": "boolean",
                        "description": "Generate a low quality image as opposed to the default high quality image"
                      },
                      "size": {
                        "type": "string",
                        "enum": [
                          "1024x1024",
                          "1792x1024",
                          "1024x1792"
                        ],
                        "description": "The size of the image to generate"
                      },
                      "style": {
                        "type": "string",
                        "enum": [
                          "vivid",
                          "natural"
                        ],
                        "description": "The style of the image to generate, which defaults to vivid"
                      }
                    },
                    "required": [
                      "path",
                      "prompt"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_newThreadSignal",
                  "description": "Signal to create a new thread and set it as the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_changeThreadSignal",
                  "description": "Signal to change the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repoId": {
                        "type": "string",
                        "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                      },
                      "account": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "repository": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "branches": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "repoId",
                      "account",
                      "repository",
                      "branches"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1",
                  "description": "The o1 agent.  This is a wise and deep reasoning agent, but it is slow and has no tools that it can use, so it only returns text based responses.  It is the wisest of all the agents, but its responses are always very long winded.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1-mini",
                  "description": "The o1-mini agent.  This is a wise and deep but fairly quick reasoner.  It is faster than o1 but it is not as good at general knowledge.  It excels at STEM, physics, and maths reasoning.  It is good at planning.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o",
                  "description": "The gpt-4o agent, or 4o for short.  This is not a reasoning model, but is smart and can think well.  It has good tone of response, very good at summarizing, and has good general knowledge.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o-mini",
                  "description": "The gpt-4o-mini agent, or 40-mini for short.  This is a very quick very fast model.  It does not reason deeply, and its strengths are reptitive or simple tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              }
            ]
          },
          "reply": {
            "assistant": {
              "role": "assistant",
              "content": null,
              "name": "agents/reasoner.md",
              "refusal": null,
              "tool_calls": [
                {
                  "id": "call_J3QAFnjmZV8U1w5fdU57mFr8",
                  "type": "function",
                  "function": {
                    "name": "o1",
                    "arguments": "{\"reasoning\":[\"I need to figure out how to proceed with running the tests based on the test and agent fixture details.\",\"The test fixture outlines different scenarios with specific expectations and dependencies.\",\"The agent fixture provides the commands related to the tests, specifically local and error command executions, which are part of the test setup.\",\"I need advice on how to approach executing these tests since I have the necessary configurations but need to determine the exact procedure or sequence.\"],\"content\":\"Given that I have a test fixture with outlined scenarios and expectations, along with an agent fixture that specifies commands related to the local and error operations to be tested, what would be the best approach to run these tests effectively and ensure their outcomes match the expectations in the test fixture?\"}"
                  }
                }
              ]
            },
            "stats": {
              "created": 1729137759,
              "model": "gpt-4o-2024-08-06",
              "system_fingerprint": "fp_a20a4ee344",
              "duration": 3637,
              "openAiProcessingMs": 3399,
              "usage": {
                "completion_tokens": 157,
                "prompt_tokens": 3710,
                "total_tokens": 3867,
                "completion_tokens_details": {
                  "reasoning_tokens": 0
                },
                "prompt_tokens_details": {
                  "cached_tokens": 2688
                }
              }
            }
          }
        },
        {
          "request": {
            "model": "gpt-4o",
            "tool_choice": "auto",
            "parallel_tool_calls": true,
            "messages": [
              {
                "content": "run test ./tests/test-fixture.test.md",
                "role": "user",
                "name": "act_VWVY702R0N37T6HC"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_EoQTFefLBvz8FgHwTiYPMF2B",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"The user has requested to run a test from a test fixture file.\",\"To understand the contents and context of the test, I need to read the file located at './tests/test-fixture.test.md'.\",\"Reading the file will allow me to analyze its contents and determine any specific instructions or frameworks required for running the test.\"],\"path\":\"./tests/test-fixture.test.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ntarget: agents/agent-fixture.md\nassessor: agents/test-assessor.md\n---\n\n## Call the local function\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- local function was called once\n- result was \"local reply\"\n\n## Fail a test\n\n**Prompts**\n\n- Call the local function\n\n**Expectations**\n\n- result was \"this expectation should fail\"\n\n## Throw an error\n\n**Prompts**\n\n- Call the error function\n\n**Expectations**\n\n- an error was thrown\n\n## Dependencies function\n\n**Dependencies**\n\n- Call the local function\n\n**Prompts**\n\n- say hello\n\n**Expectations**\n\n- hello was responded to\n- local function was called once\n\n## Multiple Dependencies\n\n**Dependencies**\n\n- Dependencies function\n- Call the local function\n\n**Prompts**\n\n- say goodbye\n\n**Expectations**\n\n- goodbye was responded to\n- local function was called twice\n- in between the two function calls, a \"hello\" was issued by the user\n",
                "tool_call_id": "call_EoQTFefLBvz8FgHwTiYPMF2B"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_FmPE3kDKT8HXPsZrSRh9FuSW",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"To understand the dependencies and the specific functions being referenced, I need to read 'agents/agent-fixture.md'.\",\"This file likely contains definitions or implementations of the local functions and error functions mentioned in the test fixture document.\",\"Reading this file will provide context on how the functions are supposed to operate and what 'local reply' means.\"],\"path\":\"agents/agent-fixture.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\ncommands:\n  - io-fixture:local\n  - io-fixture:error\n---\n\nYour name is 'Assistant'\n\nALWAYS be as brief as possible\n",
                "tool_call_id": "call_FmPE3kDKT8HXPsZrSRh9FuSW"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_JmwXtf7pHtUapxxSUHU9sppT",
                    "type": "function",
                    "function": {
                      "name": "files_read",
                      "arguments": "{\"reasoning\":[\"The test fixture document references an 'assessor' at 'agents/test-assessor.md'.\",\"Reading this file may provide insights into how the tests are evaluated and the expected outcomes.\",\"Understanding the assessment criteria is crucial for running the tests correctly.\"],\"path\":\"agents/test-assessor.md\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "---\nconfig:\n  parallel_tool_calls: false\n  tool_choice: required\ncommands:\n  - test-case-runner:openai\n  - test-case-runner:assessment\n---\n\nYou are an expert assessor of test results.\n\nAI agents will have been run previously under test conditions. Your job is to\nassess the resulting system state against the expectation, analyze why the\nsystem prompt used for the AI agent did not perform as well as it could have,\nand list improvements that could be made to the system prompt.\n\nYou will be given two inputs:\n\n1. \"threadPath\" which is a parameter to call the openai function which will read\n   in the system state for assessment against the expectation\n2. An \"Expectation\" to assess the system state against\n\nThe result from the openai function will be a json object with two keys: request\nand response. The request is the api call that was sent to the openai chat\ncompletion endpoint, and the response is what was received back from that api\ncall. Included in this api call will be the system prompt message.\n\nWhen considering the system prompt, look for factual inconsistencies,\nconflicting instructions, overly verbose or redundant sections. Also look for\nways to compress the prompt down to be more direct, or ways to make the prompt\nmore explicit to reduce the chances of deviation.\n\n## The process\n\nThere are only two steps you are allowed to do to complete your task:\n\nFirst, use the test-case-runner:openai function to read the thread file specified by threadPath. Think carefully about the information you receive\nback.\n\nSecond, analyze the information and then call the test-case-runner:assessment function with your assessment. Be brief - do not\nrepeat the expectation or the contents of the thread file verbatim - summarize.\n\n",
                "tool_call_id": "call_JmwXtf7pHtUapxxSUHU9sppT"
              },
              {
                "role": "assistant",
                "content": "The test file './tests/test-fixture.test.md' outlines several test scenarios.\n\n1. **Call the local function**: It expects the local function to be called once and for the result to be \"local reply\".\n\n2. **Fail a test**: It expects the result to be \"this expectation should fail\" which is likely designed to ensure a mechanism can handle failed tests.\n\n3. **Throw an error**: It expects an error to be thrown when the error function is called.\n\n4. **Dependencies function**: This involves a dependency where the local function needs to be called after saying hello. The expectation includes that hello should be responded to.\n\n5. **Multiple Dependencies**: This scenario has two dependencies. It expects the local function to be called twice and verifies a sequence where a \"hello\" is issued between calls.\n\nTo execute the tests, it appears necessary to interact with the commands defined in 'agents/agent-fixture.md', specifically `io-fixture:local` and `io-fixture:error`. There is also a consideration that the fixture is configured for non-parallel execution, with the possibility of multiple tool selections as required.\n\nLet me now run these tests and assess their outcomes.",
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_1tXsxy2YrSulCwadf9RPxvEt",
                    "type": "function",
                    "function": {
                      "name": "files_write",
                      "arguments": "{\"reasoning\": [\"Prepare and configure each of the test requests based on the read test fixture specification for execution.\", \"Write a configuration or test run file if needed.\"], \"path\": \"test/test-run.md\", \"content\": \"---\\ncommands:\\n  - io-fixture:local\\n  - io-fixture:error\\n---\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "{\"charactersWritten\":59}",
                "tool_call_id": "call_1tXsxy2YrSulCwadf9RPxvEt"
              },
              {
                "role": "assistant",
                "content": null,
                "name": "agents_reasoner_md",
                "refusal": null,
                "tool_calls": [
                  {
                    "id": "call_J3QAFnjmZV8U1w5fdU57mFr8",
                    "type": "function",
                    "function": {
                      "name": "o1",
                      "arguments": "{\"reasoning\":[\"I need to figure out how to proceed with running the tests based on the test and agent fixture details.\",\"The test fixture outlines different scenarios with specific expectations and dependencies.\",\"The agent fixture provides the commands related to the tests, specifically local and error command executions, which are part of the test setup.\",\"I need advice on how to approach executing these tests since I have the necessary configurations but need to determine the exact procedure or sequence.\"],\"content\":\"Given that I have a test fixture with outlined scenarios and expectations, along with an agent fixture that specifies commands related to the local and error operations to be tested, what would be the best approach to run these tests effectively and ensure their outcomes match the expectations in the test fixture?\"}"
                    }
                  }
                ]
              },
              {
                "role": "tool",
                "content": "To effectively run your tests and ensure that their outcomes match the expectations defined in your test fixture, it's essential to adopt a structured and systematic approach. Below is a step-by-step guide that outlines the best practices for setting up, executing, and validating your tests using your test and agent fixtures.\n\n1. **Choose the Right Testing Framework**\n\n   - **Select a Testing Framework**: Choose a testing framework suitable for your programming language and testing requirements (e.g., `pytest` for Python, `JUnit` for Java, `Mocha` for JavaScript).\n   - **Leverage Framework Features**: Utilize features like test discovery, setup and teardown methods, assertion libraries, and test runners provided by the framework.\n\n2. **Organize Your Test Cases**\n\n   - **Map Scenarios to Test Cases**: For each scenario in your test fixture, create a corresponding test case. This ensures comprehensive coverage of all outlined scenarios.\n   - **Use Descriptive Names**: Name your test cases descriptively to reflect the scenario they are testing. This makes it easier to identify and debug failing tests.\n\n3. **Set Up Test Fixtures Properly**\n\n   - **Initialize Test Environment**: Use your agent fixture to set up the test environment. This may include initializing objects, configuring settings, or preparing data needed for the tests.\n   - **Isolate Tests**: Ensure that each test is independent. Use setup (`setUp`) and teardown (`tearDown`) methods to prepare and clean up before and after each test to prevent side effects.\n\n4. **Implement the Tests**\n\n   - **Execute Commands**: In each test, execute the commands related to the local and error operations as specified in your agent fixture.\n   - **Simulate Error Conditions**: For error scenarios, simulate the necessary conditions to trigger the errors and observe how the system behaves.\n\n5. **Validate Outcomes with Assertions**\n\n   - **Use Assertions**: Compare the actual outcomes of your operations with the expected outcomes outlined in your test fixture using assertions provided by your testing framework.\n     ```python\n     # Example in Python with pytest\n     def test_example_scenario():\n         result = some_function()\n         expected = expected_result_from_fixture\n         assert result == expected, \"The result should match the expected value.\"\n     ```\n   - **Check All Aspects**: Validate not only the return values but also side effects, state changes, and any emitted events or logs if relevant.\n\n6. **Handle Exceptions and Errors Appropriately**\n\n   - **Test Error Handling**: Ensure that your tests check how the system handles errors. This includes verifying that appropriate exceptions are raised and that error messages are correct.\n     ```python\n     # Example of testing for an exception\n     with pytest.raises(ExpectedException) as exc_info:\n         function_that_raises_exception()\n     assert str(exc_info.value) == \"Expected error message\"\n     ```\n   - **Fail Tests on Unexpected Errors**: If an unexpected error occurs, the test should fail, indicating that there's an unhandled case in your code.\n\n7. **Use Mocking and Stubbing if Necessary**\n\n   - **Mock External Dependencies**: If your operations depend on external systems or components, use mocking to simulate their behavior. This ensures that your tests are isolated and repeatable.\n     ```python\n     # Example of mocking in Python with unittest.mock\n     @patch('module.external_dependency')\n     def test_with_mocked_dependency(mock_dependency):\n         mock_dependency.return_value = expected_value\n         result = function_under_test()\n         assert result == expected_result\n     ```\n\n8. **Automate Test Execution**\n\n   - **Use Continuous Integration (CI)**: Integrate your tests into a CI pipeline to automatically run them on code changes. Tools like Jenkins, GitHub Actions, or GitLab CI can be used.\n   - **Run Tests Regularly**: Execute the tests frequently during development to catch regressions early.\n\n9. **Review and Maintain Tests**\n\n   - **Keep Tests Up-to-Date**: As the codebase evolves, ensure that the tests are updated to reflect any changes in functionality.\n   - **Refactor Tests When Necessary**: Improve the test code for readability and maintainability, applying the same coding standards as the production code.\n\n10. **Collect and Analyze Test Results**\n\n    - **Use Test Reports**: Generate test reports to review the outcomes of your test runs. Many testing frameworks provide plugins or tools for this purpose.\n    - **Analyze Failures**: Investigate any failing tests to determine if there's a bug in the code or if the test needs adjustment due to changes in requirements.\n\n11. **Implement Logging and Debugging Aids**\n\n    - **Add Logging**: Incorporate logging within your code and tests to provide more context when tests fail.\n    - **Use Debugging Tools**: Utilize debuggers to step through code during test execution if you encounter complex issues.\n\n12. **Ensure Environment Parity**\n\n    - **Match Test Environments**: Make sure that the environment where you run the tests closely matches the production environment to avoid environment-specific issues.\n    - **Use Containers if Necessary**: Consider using Docker containers to standardize the test environment setup.\n\n13. **Document Your Testing Approach**\n\n    - **Create Test Documentation**: Document how to run the tests, the purpose of different test cases, and any setup requirements.\n    - **Explain Fixtures**: Provide explanations for your test and agent fixtures so that other team members can understand and contribute to the tests.\n\n14. **Consider Test Performance**\n\n    - **Optimize Slow Tests**: Identify and optimize tests that take a long time to run to improve the efficiency of your testing process.\n    - **Parallelize Tests**: Run tests in parallel if supported by your testing framework to reduce overall execution time.\n\nBy following this approach, you ensure that your tests are systematically verifying that the actual outcomes of your operations match the expected outcomes defined in your test fixture. This not only increases the effectiveness of your testing process but also enhances the reliability and quality of your software.\n\n**Example Workflow:**\n\n1. **Initialize Test Case**\n   - Use the agent fixture to set up any required state or configurations.\n2. **Execute Operation**\n   - Run the command or function under test.\n3. **Capture Outcome**\n   - Collect outputs, return values, state changes, or any exceptions raised.\n4. **Assert Expectations**\n   - Compare the captured outcome with the expected outcome from your test fixture using assertions.\n5. **Clean Up**\n   - Reset any modified state or configurations to ensure no side effects for subsequent tests.\n\n**Sample Test in Python Using `pytest`:**\n\n```python\nimport pytest\n\n# Assume agent_fixture is a fixture that sets up required commands or environment\n@pytest.fixture\ndef agent_fixture():\n    # Setup code here\n    yield agent\n    # Teardown code here\n\ndef test_local_operation_success(agent_fixture):\n    # Arrange\n    expected_result = \"Expected output\"\n\n    # Act\n    result = agent_fixture.execute_local_command()\n\n    # Assert\n    assert result == expected_result, \"The local operation did not return the expected result.\"\n\ndef test_error_operation_failure(agent_fixture):\n    # Arrange\n    expected_error = ValueError(\"Expected error message\")\n\n    # Act & Assert\n    with pytest.raises(ValueError) as exc_info:\n        agent_fixture.execute_error_command()\n\n    assert str(exc_info.value) == \"Expected error message\", \"The error message did not match.\"\n```\n\n**Key Takeaways:**\n\n- **Structured Testing**: A well-structured testing approach leads to more reliable and maintainable tests.\n- **Clear Expectations**: Defining clear expectations in your test fixture allows for precise validation of outcomes.\n- **Automated and Repeatable**: Automating your tests ensures they can be run consistently, reducing human error.\n- **Continuous Improvement**: Regularly review and improve your tests to adapt to changes in your application.\n\nBy meticulously planning and executing your tests with these best practices, you'll maximize the effectiveness of your testing efforts and enhance the overall quality of your application.",
                "tool_call_id": "call_J3QAFnjmZV8U1w5fdU57mFr8"
              },
              {
                "content": "You are a helpful assistant that brokers conversations with much wiser, deeper agents than\nyourself, and the human user. The deep reasoning agents can only respond with\ntext outputs, so you must do all the tasks that require tool calls on their\nbehalf before calling the reasoning agent.\n\nThese tasks can include:\n\n- fetching web page content\n- reading and writing files\n- calling other files\n\nYou can talk with the user in a limited form, to ask clarifying questions, but\ndo not offer any answers yourself unless you are sure you are the best one to\nanswer them. Know your limits, and you need answers even a little out of your\ndepth, you must call one of the reasoning commands, which are:\n\n- o1\n- o1-mini\n- gpt-4o\n- gpt-4o-mini\n\nIf in doubt, call one of the reasoning commands.\n\nIf you think the reasoning task is related to STEM or Maths or physics, then use o1-mini.\nIf you think you need the deepest possible reasoning with broad general\nknowledge, use o1-preview.\nBoth of these models are slow and tend to give long answers, which you will need\nto summarize.\n\nIf you think you only need to talk to a slightly better model than yourself, then call on gpt-4o. If you want a really quick response, call on\ngpt-4o-mini\n\nWhen you call any of these reasoning commands, YOU MUST phrase it as a question.\nRemember, you are the user and the reasoner is an advanced AI. Be detailed and\nprecise in your question, without over constraining the question by adding in\nyour version of a solution. Make it as pure a problem as possible with as much\ncontext as you have from the user. Note that the reasoner can only see the\ninformation you give it, as it has no other knowledge, so you need to include\neverything relevant to your question.\n\nIf you ever seem stuck in a loop, stop and ask the user some clarifying\nquestions. NEVER GO MORE THAN 3 REASONING CALLS WITHOUT RESPONDING TO THE USER.\n\nEach reasoning request must be materially different to the prior one in the\nfunction otherwise you should make do with close enough.\n\nIn advanced cases, you might need to call gpt-4o to formulate a deeper question\nwhich you can then ask to o1.\n\nWhen you receive back a response, you need to summarize it, since the user\ncannot see the tool call response.\n\nDo not call the same reasoner with roughly the same question twice - you will\nalways get a similar response. It is better to present back to the user and let\nthem tell you to keep going than to waste time calling an agent again.",
                "role": "system",
                "name": "agents_reasoner_md"
              }
            ],
            "seed": 1337,
            "tools": [
              {
                "type": "function",
                "function": {
                  "name": "files_write",
                  "description": "Write to a file with optional contents.  Will overwrite existing files.  Will create all required parent directories. Returns the number of characters written in the operation",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file"
                      },
                      "content": {
                        "type": "string",
                        "description": "the contents of the file to be written"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_ls",
                  "description": "List files for a given path. Returns file names with directory names ending in \"/\".  The root (\"/\") is actually just \".\".  To count the number of files instead of list them, set \"count\" to true.  To include hidden files in the list or count, set \"all\" to true.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the directory you want to list"
                      },
                      "count": {
                        "type": "boolean",
                        "description": "count the number of files and return this instead of the names of the files"
                      },
                      "all": {
                        "type": "boolean",
                        "description": "include all files including hidden files in the operation"
                      }
                    },
                    "required": [
                      "reasoning"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_read",
                  "description": "Read a file.  The contents will be returned as a string.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to read"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_rm",
                  "description": "Remove a file.  This is recursive.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "path": {
                        "type": "string",
                        "description": "the relative path to the file you want to remove"
                      }
                    },
                    "required": [
                      "reasoning",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_mv",
                  "description": "Move a file efficiently. This is a rename operation.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to move"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "files_cp",
                  "description": "Copy a file efficiently.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "from": {
                        "type": "string",
                        "description": "the relative path to the file you want to copy"
                      },
                      "to": {
                        "type": "string",
                        "description": "the relative path to the new location of the file"
                      }
                    },
                    "required": [
                      "reasoning",
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "stateboard_show",
                  "description": "Show the given path with the given widget on the stateboard",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "pid": {
                        "type": "object",
                        "properties": {
                          "repoId": {
                            "type": "string",
                            "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                          },
                          "account": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "repository": {
                            "type": "string",
                            "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                          },
                          "branches": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1
                          }
                        },
                        "required": [
                          "repoId",
                          "account",
                          "repository",
                          "branches"
                        ],
                        "additionalProperties": false,
                        "description": "defaults to the current pid"
                      },
                      "commit": {
                        "type": "string",
                        "description": "the commit to show - defaults to the latest commit"
                      },
                      "path": {
                        "type": "string",
                        "description": "the path to show - defaults to \".\""
                      },
                      "widgets": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "TPS_REPORT",
                            "FILE_EXPLORER",
                            "MARKDOWN_EDITOR",
                            "BRANCH_EXPLORER",
                            "COMMIT_GRAPH",
                            "COMMIT_INFO",
                            "THREADS",
                            "REPOS"
                          ],
                          "description": "the widget to show"
                        },
                        "description": "the stack of widgets to display, in the order of their display"
                      }
                    },
                    "required": [
                      "reasoning",
                      "widgets"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "youtube_fetch",
                  "description": "Fetch video details and subtitles (subs).  This will write the transcription json object to the given path, and return that path if everything was ok",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": ".*\\.json$",
                        "description": "Relative path to save the fetched transcription result.  Must end in \".json\" and must start with \"./\""
                      },
                      "videoID": {
                        "type": "string",
                        "description": "The last part of a YouTube URL. For example, in the URL https://www.youtube.com/watch?v=zIB7YsC34Tc, the videoID is \"zIB7YsC34Tc\""
                      },
                      "lang": {
                        "type": "string",
                        "description": "Language code for the subtitles - defaults to \"en\""
                      }
                    },
                    "required": [
                      "path",
                      "videoID"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "utils_time",
                  "description": "Returns the current date and time in ISO 8601 format with zero timezone offset",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "ai-completions_image",
                  "description": "Generate an image using DALL-E-3 from the provided prompt.  The image will be saved to the provided path.  The revised prompt that the image generator used will be returned, as well as the size of the image in bytes.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "pattern": "\\.jpg$",
                        "description": "The path to the image to generate, which should be a meaningful name in the images/ directory, and should end in .jpg"
                      },
                      "prompt": {
                        "type": "string",
                        "maxLength": 4000
                      },
                      "lowQuality": {
                        "type": "boolean",
                        "description": "Generate a low quality image as opposed to the default high quality image"
                      },
                      "size": {
                        "type": "string",
                        "enum": [
                          "1024x1024",
                          "1792x1024",
                          "1024x1792"
                        ],
                        "description": "The size of the image to generate"
                      },
                      "style": {
                        "type": "string",
                        "enum": [
                          "vivid",
                          "natural"
                        ],
                        "description": "The style of the image to generate, which defaults to vivid"
                      }
                    },
                    "required": [
                      "path",
                      "prompt"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_newThreadSignal",
                  "description": "Signal to create a new thread and set it as the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "backchat_changeThreadSignal",
                  "description": "Signal to change the current target thread",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "repoId": {
                        "type": "string",
                        "pattern": "^rep_[0-9A-HJKMNP-TV-Z]{16}$"
                      },
                      "account": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "repository": {
                        "type": "string",
                        "pattern": "^[a-zA-Z\\d](?:[a-zA-Z\\d]|[-.](?=[a-zA-Z\\d])){0,38}$"
                      },
                      "branches": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1
                      }
                    },
                    "required": [
                      "repoId",
                      "account",
                      "repository",
                      "branches"
                    ],
                    "additionalProperties": false
                  },
                  "strict": false
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1",
                  "description": "The o1 agent.  This is a wise and deep reasoning agent, but it is slow and has no tools that it can use, so it only returns text based responses.  It is the wisest of all the agents, but its responses are always very long winded.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "o1-mini",
                  "description": "The o1-mini agent.  This is a wise and deep but fairly quick reasoner.  It is faster than o1 but it is not as good at general knowledge.  It excels at STEM, physics, and maths reasoning.  It is good at planning.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o",
                  "description": "The gpt-4o agent, or 4o for short.  This is not a reasoning model, but is smart and can think well.  It has good tone of response, very good at summarizing, and has good general knowledge.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              },
              {
                "type": "function",
                "function": {
                  "name": "gpt-4o-mini",
                  "description": "The gpt-4o-mini agent, or 40-mini for short.  This is a very quick very fast model.  It does not reason deeply, and its strengths are reptitive or simple tasks.",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "reasoning": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Step by step reasoning why this function was called and what it is trying to achieve.  This is working space for clarifying thought and is not passed through to the function"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "reasoning",
                      "content"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  "strict": true
                }
              }
            ]
          },
          "reply": {
            "assistant": {
              "role": "assistant",
              "content": "To run the tests effectively and ensure the outcomes match the expectations, a structured approach is necessary. This involves choosing an appropriate testing framework, organizing test cases, setting up test environments, implementing and validating tests through assertions, handling exceptions, utilizing mocking for external dependencies, automating test executions, and maintaining the tests for consistency with the evolving codebase.\n\nHowever, I need further details to tailor this approach to your specific environment. Could you please confirm the programming language or testing framework you're using, or if there's a specific setup you've employed for executing these tests? This information will aid in providing a more precise methodology.",
              "name": "agents/reasoner.md",
              "refusal": null
            },
            "stats": {
              "created": 1729137782,
              "model": "gpt-4o-2024-08-06",
              "system_fingerprint": "fp_a20a4ee344",
              "duration": 3012,
              "openAiProcessingMs": 2751,
              "usage": {
                "completion_tokens": 122,
                "prompt_tokens": 5520,
                "total_tokens": 5642,
                "completion_tokens_details": {
                  "reasoning_tokens": 0
                },
                "prompt_tokens_details": {
                  "cached_tokens": 1792
                }
              }
            }
          }
        }
      ],
      "rep_E8R/dreamcatcher-tech/HAL:main/act_VWV/the_9NG/napp-o1-16": [
        {
          "request": {
            "model": "o1-preview",
            "messages": [
              {
                "content": "Given that I have a test fixture with outlined scenarios and expectations, along with an agent fixture that specifies commands related to the local and error operations to be tested, what would be the best approach to run these tests effectively and ensure their outcomes match the expectations in the test fixture?",
                "role": "user",
                "name": "act_VWVY702R0N37T6HC"
              }
            ],
            "seed": 1337
          },
          "reply": {
            "assistant": {
              "role": "assistant",
              "content": "To effectively run your tests and ensure that their outcomes match the expectations defined in your test fixture, it's essential to adopt a structured and systematic approach. Below is a step-by-step guide that outlines the best practices for setting up, executing, and validating your tests using your test and agent fixtures.\n\n1. **Choose the Right Testing Framework**\n\n   - **Select a Testing Framework**: Choose a testing framework suitable for your programming language and testing requirements (e.g., `pytest` for Python, `JUnit` for Java, `Mocha` for JavaScript).\n   - **Leverage Framework Features**: Utilize features like test discovery, setup and teardown methods, assertion libraries, and test runners provided by the framework.\n\n2. **Organize Your Test Cases**\n\n   - **Map Scenarios to Test Cases**: For each scenario in your test fixture, create a corresponding test case. This ensures comprehensive coverage of all outlined scenarios.\n   - **Use Descriptive Names**: Name your test cases descriptively to reflect the scenario they are testing. This makes it easier to identify and debug failing tests.\n\n3. **Set Up Test Fixtures Properly**\n\n   - **Initialize Test Environment**: Use your agent fixture to set up the test environment. This may include initializing objects, configuring settings, or preparing data needed for the tests.\n   - **Isolate Tests**: Ensure that each test is independent. Use setup (`setUp`) and teardown (`tearDown`) methods to prepare and clean up before and after each test to prevent side effects.\n\n4. **Implement the Tests**\n\n   - **Execute Commands**: In each test, execute the commands related to the local and error operations as specified in your agent fixture.\n   - **Simulate Error Conditions**: For error scenarios, simulate the necessary conditions to trigger the errors and observe how the system behaves.\n\n5. **Validate Outcomes with Assertions**\n\n   - **Use Assertions**: Compare the actual outcomes of your operations with the expected outcomes outlined in your test fixture using assertions provided by your testing framework.\n     ```python\n     # Example in Python with pytest\n     def test_example_scenario():\n         result = some_function()\n         expected = expected_result_from_fixture\n         assert result == expected, \"The result should match the expected value.\"\n     ```\n   - **Check All Aspects**: Validate not only the return values but also side effects, state changes, and any emitted events or logs if relevant.\n\n6. **Handle Exceptions and Errors Appropriately**\n\n   - **Test Error Handling**: Ensure that your tests check how the system handles errors. This includes verifying that appropriate exceptions are raised and that error messages are correct.\n     ```python\n     # Example of testing for an exception\n     with pytest.raises(ExpectedException) as exc_info:\n         function_that_raises_exception()\n     assert str(exc_info.value) == \"Expected error message\"\n     ```\n   - **Fail Tests on Unexpected Errors**: If an unexpected error occurs, the test should fail, indicating that there's an unhandled case in your code.\n\n7. **Use Mocking and Stubbing if Necessary**\n\n   - **Mock External Dependencies**: If your operations depend on external systems or components, use mocking to simulate their behavior. This ensures that your tests are isolated and repeatable.\n     ```python\n     # Example of mocking in Python with unittest.mock\n     @patch('module.external_dependency')\n     def test_with_mocked_dependency(mock_dependency):\n         mock_dependency.return_value = expected_value\n         result = function_under_test()\n         assert result == expected_result\n     ```\n\n8. **Automate Test Execution**\n\n   - **Use Continuous Integration (CI)**: Integrate your tests into a CI pipeline to automatically run them on code changes. Tools like Jenkins, GitHub Actions, or GitLab CI can be used.\n   - **Run Tests Regularly**: Execute the tests frequently during development to catch regressions early.\n\n9. **Review and Maintain Tests**\n\n   - **Keep Tests Up-to-Date**: As the codebase evolves, ensure that the tests are updated to reflect any changes in functionality.\n   - **Refactor Tests When Necessary**: Improve the test code for readability and maintainability, applying the same coding standards as the production code.\n\n10. **Collect and Analyze Test Results**\n\n    - **Use Test Reports**: Generate test reports to review the outcomes of your test runs. Many testing frameworks provide plugins or tools for this purpose.\n    - **Analyze Failures**: Investigate any failing tests to determine if there's a bug in the code or if the test needs adjustment due to changes in requirements.\n\n11. **Implement Logging and Debugging Aids**\n\n    - **Add Logging**: Incorporate logging within your code and tests to provide more context when tests fail.\n    - **Use Debugging Tools**: Utilize debuggers to step through code during test execution if you encounter complex issues.\n\n12. **Ensure Environment Parity**\n\n    - **Match Test Environments**: Make sure that the environment where you run the tests closely matches the production environment to avoid environment-specific issues.\n    - **Use Containers if Necessary**: Consider using Docker containers to standardize the test environment setup.\n\n13. **Document Your Testing Approach**\n\n    - **Create Test Documentation**: Document how to run the tests, the purpose of different test cases, and any setup requirements.\n    - **Explain Fixtures**: Provide explanations for your test and agent fixtures so that other team members can understand and contribute to the tests.\n\n14. **Consider Test Performance**\n\n    - **Optimize Slow Tests**: Identify and optimize tests that take a long time to run to improve the efficiency of your testing process.\n    - **Parallelize Tests**: Run tests in parallel if supported by your testing framework to reduce overall execution time.\n\nBy following this approach, you ensure that your tests are systematically verifying that the actual outcomes of your operations match the expected outcomes defined in your test fixture. This not only increases the effectiveness of your testing process but also enhances the reliability and quality of your software.\n\n**Example Workflow:**\n\n1. **Initialize Test Case**\n   - Use the agent fixture to set up any required state or configurations.\n2. **Execute Operation**\n   - Run the command or function under test.\n3. **Capture Outcome**\n   - Collect outputs, return values, state changes, or any exceptions raised.\n4. **Assert Expectations**\n   - Compare the captured outcome with the expected outcome from your test fixture using assertions.\n5. **Clean Up**\n   - Reset any modified state or configurations to ensure no side effects for subsequent tests.\n\n**Sample Test in Python Using `pytest`:**\n\n```python\nimport pytest\n\n# Assume agent_fixture is a fixture that sets up required commands or environment\n@pytest.fixture\ndef agent_fixture():\n    # Setup code here\n    yield agent\n    # Teardown code here\n\ndef test_local_operation_success(agent_fixture):\n    # Arrange\n    expected_result = \"Expected output\"\n\n    # Act\n    result = agent_fixture.execute_local_command()\n\n    # Assert\n    assert result == expected_result, \"The local operation did not return the expected result.\"\n\ndef test_error_operation_failure(agent_fixture):\n    # Arrange\n    expected_error = ValueError(\"Expected error message\")\n\n    # Act & Assert\n    with pytest.raises(ValueError) as exc_info:\n        agent_fixture.execute_error_command()\n\n    assert str(exc_info.value) == \"Expected error message\", \"The error message did not match.\"\n```\n\n**Key Takeaways:**\n\n- **Structured Testing**: A well-structured testing approach leads to more reliable and maintainable tests.\n- **Clear Expectations**: Defining clear expectations in your test fixture allows for precise validation of outcomes.\n- **Automated and Repeatable**: Automating your tests ensures they can be run consistently, reducing human error.\n- **Continuous Improvement**: Regularly review and improve your tests to adapt to changes in your application.\n\nBy meticulously planning and executing your tests with these best practices, you'll maximize the effectiveness of your testing efforts and enhance the overall quality of your application.",
              "name": "agents/o1.md",
              "refusal": null
            },
            "stats": {
              "created": 1729137763,
              "model": "o1-preview-2024-09-12",
              "system_fingerprint": "fp_49f580698f",
              "duration": 17472,
              "openAiProcessingMs": 17190,
              "usage": {
                "completion_tokens": 2293,
                "prompt_tokens": 78,
                "total_tokens": 2371,
                "completion_tokens_details": {
                  "reasoning_tokens": 640
                },
                "prompt_tokens_details": {
                  "cached_tokens": 0
                }
              }
            }
          }
        }
      ]
    }
  }
}