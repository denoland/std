name: ci

permissions:
  contents: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Run tests
        run: deno task test

      - name: Generate lcov
        if: matrix.os == 'ubuntu-latest'
        run: deno task cov:gen

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          name: ${{ matrix.os }}

      - name: Run benchmark
        if: matrix.os == 'ubuntu-latest'
        run: deno task bench | tee output.txt

      - name: Store benchmark result
        if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Artifact Benchmarks
          tool: 'benchmarkjs'
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'
          comment-on-alert: true
          fail-on-alert: true

  lint:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Format
        run: deno fmt --check

      - name: Lint
        run: deno task lint

      - name: Spell-check
        uses: crate-ci/typos@master
        if: matrix.os == 'ubuntu-latest'
        with:
          config: ./.github/typos.toml

  publish-dry-run:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Publish (dry run)
        run: deno publish --dry-run
