{
  "name": "@artifact/files",
  "version": "0.0.1",
  "napp-format": "v1",
  "description": "filesystem access using the artifact api",
  "runtime": "deno",
  "branding": "./avatar.jpg",
  "agent": {
    // entry point that takes plain text in and returns text plus files
    "napp": "napp-runner-name",
    "tool": "some-exported-function", // if use a function other than main
    "parameters": {
      // parameters for the chat runner, based on what the runner is
      "model": "gpt-4o",
      "parallel_tool_calls": false,
      "stop_on_tools": ["tool1", "tool3"]
      // content is the reserved name for the input text
    }
  },
  "main": "some-function",
  "tools": {
    "some-function": {
      "description": "This function does something",
      "parameters": {
        "param1": {
          "description": "This is the first parameter",
          "type": "string",
          "required": true
        },
        "param2": {
          "description": "This is the second parameter",
          "type": "number",
          "required": false
        },
        "permissions": [
          // list of permissions required to run this function
        ],
        "gateways": [
          // list of gateways required to run this function
        ]
      },
      "returns": {
        "description": "This is what the function returns",
        "type": "string"
      },
      "throws": {
        "FileNotFoundError": {
          // list of expected error types and what to do about it
        }
      }
    },
    // if the function name is the same, as what is in a napp,
    "some-other-function": "dependent-napp-name",
    "modified-passthru": {
      // passes thru to a tool of the same name
      "parameters": {},
      "napp": {
        "name": "dependent-napp-name",
        "tool": "some-exported-function"
      }
    }
  },
  "help": [
    // list of files that can be read to learn how to interface with this napp
    // intended to be read by an AI
  ],
  "test": {
    "napp": "napp-test-runner-name",
    "parameters": {
      // config for the test runner, based on what the runner is
      "files": [
        // list of test files that can be run to verify the napp is working correctly
      ]
    }
  },
  "dependencies": {
    // list of napps that this napp depends on, including version numbers and
    // commits so that every reference to the napp can be by name.
    "dependent-napp-name": {
      "version": "0.0.1",
      "commit": "some-commit-hash"
    }
  },
  // list of the api gateway targets that this thing needs to do its job
  "sideEffects": {
    // default configurations for the production running of side effects
  },
  "testSideEffects": {
    // special services that can be used for testing - these are still live but
    // are somehow test grade, as in might be cheaper, or no credentials
  },
  "mockSideEffects": {
    // when running in the mock environment, these side effects are supplied
  },
  "graphics": {
    // a list of exported widgets that can be displayed on the stateboard
    "googleMapsViewer": {
      "type": "react",
      "component": "./path/to/component",
      "parameters": {
        // mock react props that can be configured by the LLM
      }
    }
  }
}

// gateways can be just a fetch function with some urls
// can make a moneyworks connector, which could be a napp, running as a gateway
// host
// upstream dependencies ?
// tools being the same exported as what is in the agent
// need an agent config that is a generic way

// gateways need to have backups and retry policies
// gateways need environments, like mock, test, prod

//   ---
// commands:
//   - files:write
//   - files:ls
//   - files:read
//   - files:update
//   - files:rm
//   - files:mv
//   - files:search
//   - stateboard:show
// ---
